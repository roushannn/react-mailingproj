{"version":3,"sources":["addressData.js","sgFloorUnit.js","sgPostal.js","foreignPostal.js","App.js","serviceWorker.js","index.js"],"names":["addressData","country","postalCode","block","street","floor","unit","buidlingName","line1","line2","line3","SgFloorUnit","props","useState","setFloor","error","msg","floorMsg","setFloorMsg","setUnit","unitMsg","setUnitMsg","validateFloor","event","error2","msg2","length","match","validateUnit","useEffect","getError","clearInput","className","type","name","value","placeholder","onChange","target","onBlur","style","display","SgComponent","building","setBuilding","setPostal","address","setAddress","floorUnit","setFloorUnit","found","setFound","foundFU","setFoundFU","setClassName","required","disabled","onClick","preventDefault","tempAdd","undefined","find","addressd","ForeignPostal","setLine1","setLine2","setLine3","validateLine","line","console","log","App","setCountry","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3e151b09.chunk.js","sourcesContent":["const addressData = [\r\n    {\r\n        country: \"Singapore\",\r\n        postalCode: \"123456\",\r\n        block: \"456B\",\r\n        street: \"Sumang Lane\",\r\n        floor: \"01\",\r\n        unit: \"123\",\r\n        buidlingName: \"\"\r\n    },\r\n    {\r\n        country: \"Singapore\",\r\n        postalCode: \"110220\",\r\n        block: \"220\",\r\n        street: \"Hougang Street 4\",\r\n        floor: \"02\",\r\n        unit: \"12\",\r\n        buidlingName: \"\"\r\n    },\r\n    {\r\n        country: \"Singapore\",\r\n        postalCode: \"987654\",\r\n        block: \"654\",\r\n        street: \"Terrace House\",\r\n        floor: \"\",\r\n        unit: \"\",\r\n        buidlingName: \"\"\r\n    },\r\n    {\r\n        country: \"Malaysia\",\r\n        line1: \"\",\r\n        line2: \"\",\r\n        line3: \"\"\r\n    },\r\n    {\r\n        country: \"Thailand\",\r\n        line1: \"\",\r\n        line2: \"\",\r\n        line3: \"\"\r\n    },\r\n    {\r\n        country: \"Australia\",\r\n        line1: \"\",\r\n        line2: \"\",\r\n        line3: \"\"\r\n    }\r\n]\r\n\r\nexport default addressData","import React, { useState, useEffect } from \"react\"\r\n\r\nfunction SgFloorUnit(props) {\r\n    const [floor, setFloor] = useState(\"\")\r\n    const [floorMsg, setFloorMsg] = useState({\r\n        error: false,\r\n        msg: \" \"\r\n    })\r\n    const [unit, setUnit] = useState(\"\")\r\n    const [unitMsg, setUnitMsg] = useState({\r\n        error: false,\r\n        msg: \" \"\r\n    })\r\n\r\n    function validateFloor(event) {\r\n        let numbers = /^[0-9]+$/\r\n        let error2 = true\r\n        let msg2 = \"\"\r\n\r\n        if(floor === \"\") {\r\n            if(unit === \"\"){\r\n                error2 = false\r\n            }\r\n            else {\r\n                msg2 = \"floor number is required\"\r\n            }\r\n        }\r\n\r\n        else {\r\n            if(floor.length > 3) {\r\n                msg2 = \"please enter a valid floor number (max 3 digits)\"\r\n            }\r\n            else if(!floor.match(numbers)) {\r\n                msg2 = \"please enter only numbers\"\r\n            }\r\n            else {\r\n                validateUnit()\r\n                error2 = false\r\n            }\r\n        }    \r\n        setFloorMsg({\r\n            error: error2,\r\n            msg: msg2\r\n        })\r\n    }\r\n\r\n    function validateUnit(event) {\r\n        let error2 = true\r\n        let msg2 = \"\"\r\n\r\n        if(unit === \"\") {\r\n            if(floor === \"\")\r\n                error2 = false\r\n            else {\r\n                msg2 = \"Unit number is required\"\r\n            }\r\n        }\r\n        else {\r\n            if (floor === \"\") {\r\n                validateFloor()\r\n            }\r\n            if(unit.length > 5) {\r\n                msg2 = \"please enter a valid unit number (max 5 digits)\"\r\n            }\r\n            else {\r\n                error2 = false\r\n            }\r\n        }\r\n        setUnitMsg({\r\n            error: error2,\r\n            msg: msg2\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.getError({\r\n            floor: floorMsg.error, \r\n            unit: unitMsg.error\r\n        })\r\n    }, [floorMsg.error, unitMsg.error])\r\n\r\n    useEffect(() => {\r\n        setFloor(\"\")\r\n        setUnit(\"\")\r\n    }, [props.clearInput])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p>Floor, Unit</p>\r\n            <input className={floorMsg.error === true? 'error' : ''} type=\"text\" name=\"floor\" value={floor} placeholder=\"floor\" \r\n                onChange={event => setFloor(event.target.value)} \r\n                onBlur={\r\n                    validateFloor\r\n                    }/>\r\n            <input className={unitMsg.error === true? 'error' : ''} type=\"text\" name=\"unit\" value={unit} placeholder=\"unit\" \r\n                onChange={event => setUnit( event.target.value)} \r\n                onBlur={\r\n                    validateUnit\r\n                    }/> <br />\r\n            <p className=\"errorMsg\" style={{display: floorMsg.error === true ? 'block' : 'none' }}>{floorMsg.msg}</p>\r\n            <p className=\"errorMsg\" style={{display: unitMsg.error === true ? 'block' : 'none' }}>{unitMsg.msg}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SgFloorUnit","import React, { useState, useEffect } from 'react'\r\nimport addressData from './addressData'\r\nimport SgFloorUnit from './sgFloorUnit'\r\n\r\nfunction SgComponent(props) {\r\n    const [building, setBuilding] = useState(\"\")\r\n    const [postalCode, setPostal] = useState(\"\")\r\n    const [address, setAddress] = useState({\r\n        block: \"\",\r\n        street: \"\"\r\n    })\r\n    const [floorUnit, setFloorUnit] = useState(true)\r\n    const [found, setFound] = useState(false)\r\n    const [foundFU, setFoundFU] = useState(true)\r\n    const [className, setClassName] = useState(\"\")\r\n\r\n    function clearData() {\r\n        setAddress({\r\n            block: \"\",\r\n            street: \"\"\r\n        })\r\n        setFloorUnit(true)\r\n        setFound(false)\r\n        setClassName(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n       clearData()\r\n    }, [props.country])\r\n\r\n    function validatePostalCode(event) {\r\n        event.preventDefault()\r\n        let numbers = /^[0-9]+$/\r\n        let tempAdd = {\r\n            block: \"\",\r\n            street: \"\"\r\n        }\r\n\r\n        if (!postalCode.match(numbers)) {\r\n             setClassName(\"error\")\r\n    \r\n        } else {\r\n            tempAdd = addressData.find(addressd => addressd.postalCode === postalCode)\r\n            \r\n            if(tempAdd === undefined){\r\n                setClassName(\"error\")\r\n            }\r\n            \r\n            else {\r\n                setFound(true)\r\n                setAddress({\r\n                    block: tempAdd.block,\r\n                    street: tempAdd.street\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    function changePostal() {\r\n        if(postalCode !== \"\" && address.block !== \"\") {\r\n            setAddress({\r\n                block: \"\",\r\n                street: \"\"\r\n            })\r\n            setFloorUnit(false)\r\n            setFound(false)\r\n        }\r\n    }\r\n\r\n    function getError(error) {\r\n        if(error.floor || error.unit) {\r\n            setFoundFU(false)\r\n        }\r\n        else{\r\n            setFoundFU(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Postal Code</p>\r\n            <input className={className} type=\"text\" name=\"postalCode\" value={postalCode} \r\n                placeholder=\"postal code\" \r\n                onChange={event => {\r\n                    setPostal(event.target.value)\r\n                    changePostal()}}\r\n                required/> \r\n            <button disabled={postalCode.length < 6} onClick={validatePostalCode}>Search</button> <br />\r\n            <p className=\"errorMsg\" style={{display: className === \"error\" ? 'block' : 'none' }}>no such postal code found</p>\r\n\r\n            <p>Block, Street</p>\r\n            <input type=\"text\" name=\"block\" value={address.block || \"\"} placeholder=\"block\" \r\n                disabled={found} \r\n                onChange={event => setAddress({block: event.target.value})} />\r\n\r\n            <input type=\"text\" name=\"street\" value={address.street || \"\"} placeholder=\"street\" \r\n                disabled={found} \r\n                onChange={event => setAddress({street: event.target.value})} /> <br />\r\n\r\n            <SgFloorUnit getError={getError}  clearInput={floorUnit}/>\r\n\r\n            <p>Building Name (Optional)</p>\r\n            <input type=\"text\" name=\"buildingName\" value={building} placeholder=\"building name\"\r\n                onChange={event => setBuilding(event.target.value)}/>\r\n            <br />\r\n            <button disabled={!(found && foundFU)} >Submit</button>\r\n\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default SgComponent","import React, { useState, useEffect } from \"react\"\r\n\r\nfunction ForeignPostal(props) {\r\n    const [line1, setLine1] = useState(\"\")\r\n    const [line2, setLine2] = useState(\"\")\r\n    const [line3, setLine3] = useState(\"\")\r\n\r\n    function clearData() {\r\n        setLine1(\"\")\r\n        setLine2(\"\")\r\n        setLine3(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n       clearData()\r\n    }, [props.country])\r\n        \r\n    function validateLine(line, name) {\r\n        if(line === \"\") {\r\n            console.log(\"please enter address\", name)\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <p>Address:</p>\r\n            <input type=\"text\" name=\"line1\" value={line1} placeholder=\"address line 1\"\r\n            onChange={event => setLine1(event.target.value)} \r\n            onBlur={event => validateLine(event.target.value, event.target.name)}/><br />\r\n\r\n            <input type=\"text\" name=\"line2\" value={line2} placeholder=\"address line 2\"\r\n            onChange={event => setLine2(event.target.value)}\r\n            onBlur={event => validateLine(event.target.value, event.target.name)}/><br />\r\n\r\n            <input type=\"text\" name=\"line3\" value={line3} placeholder=\"address line 3\"\r\n            onChange={event => setLine3(event.target.value)}\r\n            onBlur={event => validateLine(event.target.value, event.target.name)}/><br />\r\n            <br />\r\n\r\n            <button disabled={!(line1 !== \"\" && line2 !== \"\" && line3 !== \"\")} >Submit</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForeignPostal","import React, { useState } from 'react';\n\nimport './App.css';\nimport SgPostal from \"./sgPostal\"\nimport ForeignPostal from \"./foreignPostal\"\n\nfunction App() {\n  const [country, setCountry] = useState(\"Singapore\")\n\n  return (\n    <div className=\"App\">\n      <form>\n        <p>Country</p>\n        <select name=\"country\" value={country} onChange={event => setCountry(event.target.value)}>\n            <option value=\"Singapore\">Singapore </option>\n            <option value=\"Malaysia\">Malaysia </option>\n            <option value=\"Australia\">Australia </option>\n        </select> <br />\n\n        <div>{country === \"Singapore\" ? <SgPostal country={country} /> : <ForeignPostal country={country}/>}</div>\n\n      </form>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}